# IF THIS FILE IS RUN, preprocessing.py (models folder) MUST be RUN BEFORE THE MODELS CAN BE USED
import pandas as pd
import os

df = pd.read_csv("recs_metadata_2020.csv")

# Choosing Data Features

# REMOVED DATA FEATURES ARE LISTED BELOW
# "STATE_FIPS",
# "state_postal",
# "IECC_climate_code",
# "UATYP10",
# "HDD30YR_PUB",
# "CDD30YR_PUB",
# "CELLAR",
# "CRAWL",
# "CONCRETE",
# "BASEOTH",
# "BASEFIN",
# "ATTIC",
# "ATTICFIN",
# "STORIES",
# "PRKGPLC1",
# "SIZEOFGARAGE",
# "STUDIO",
# "WALLTYPE",
# "ROOFTYPE",
# "HIGHCEIL",
# "DOOR1SUM",
# "WINDOWS",
# "TYPEGLASS",
# "ORIGWIN",
# "WINFRAME",
# "TREESHAD",
# "ADQINSUL",
# "DRAFTY",
# "UGASHERE",
# "SWIMPOOL",
# "MONPOOL",
# "POOLPUMP",
# "FUELPOOL",
# "RECBATH",
# "MONTUB",
# "FUELTUB",
# "SIZRFRI1",
# "TYPERFR1",
# "AGERFRI1",
# "ICE",
# "SIZRFRI2",
# "TYPERFR2",
# "AGERFRI2",
# "LOCRFRI2",
# "WINECHILL",
# "UPRTFRZR",
# "SIZFREEZ",
# "FREEZER",
# "AGEFRZR",
# "RANGE",
# "COOKTOP",
# "RANGEFUEL",
# "RANGEINDT",
# "RCOOKUSE",
# "ROVENUSE",
# "COOKTOPFUEL",
# "COOKTOPINDT",
# "COOKTOPUSE",
# "OVENFUEL",
# "OVENUSE",
# "AMTMICRO",
# "OUTGRILLFUEL",
# "OUTGRILL",
# "NUMMEAL",
# "USECOFFEE",
# "TOAST",
# "TOASTOVN",
# "CROCKPOT",
# "PRSSCOOK",
# "RICECOOK",
# "BLENDER",
# "APPOTHER",
# "ELFOOD",
# "LPCOOK",
# "UGCOOK",
# "DISHWASH",
# "DWASHUSE",
# "DWCYCLE",
# "AGEDW",
# "CWASHER",
# "TOPFRONT",
# "WASHLOAD",
# "WASHTEMP",
# "AGECWASH",
# "DRYER",
# "DRYRFUEL",
# "DRYRUSE",
# "AGECDRYER",
# "TVSIZE1",
# "TVTYPE1",
# "TVUSE1",
# "TVONWD1",
# "TVONWE1",
# "TVSIZE2",
# "TVTYPE2",
# "TVUSE2",
# "TVONWD2",
# "TVONWE2",
# "TVSIZE3",
# "TVTYPE3",
# "TVUSE3",
# "TVONWD3",
# "TVONWE3",
# "CABLESAT",
# "COMBODVR",
# "SEPDVR",
# "INTSTREAM",
# "PLAYSTA",
# "DVD",
# "VCR",
# "TVAUDIOSYS",
# "TELLWORK",
# "TELLDAYS",
# "TLDESKTOP",
# "TLLAPTOP",
# "TLTABLET",
# "TLMONITOR",
# "TLOTHER",
# "ONLNEDUC",
# "INTERNET",
# "INTYPECELL",
# "INTYPEBROAD",
# "INTYPEOTH",
# "SMARTSPK",
# "SSLIGHT",
# "SSTEMP",
# "SSSECURE",
# "SSTV",
# "SSOTHER",
# "HEATHOME",
# "DNTHEAT",
# "HEATAPT",
# "EQUIPM",
# "FUELHEAT",
# "EQUIPAGE",
# "GEOHP",
# "EQUIPAUXTYPE",
# "EQUIPAUX",
# "FUELAUX",
# "USEEQUIPAUX",
# "NUMPORTEL",
# "NUMFIREPLC",
# "NUMDLHP",
# "BASEHEAT",
# "ATTCHEAT",
# "GARGHEAT",
# "HUMIDTYPE",
# "NUMPORTHUM",
# "USEHUMID",
# "ELWARM",
# "UGWARM",
# "LPWARM",
# "FOWARM",
# "WDWARM",
# "AIRCOND",
# "COOLAPT",
# "ACEQUIPM_PUB",
# "ACEQUIPAGE",
# "ACEQUIPAUXTYPE_PUB",
# "NUMDLHPAC",
# "NUMWWAC",
# "NUMPORTAC",
# "BASECOOL",
# "ATTCCOOL",
# "GARGCOOL",
# "NUMFLOORFAN",
# "USECFAN",
# "HOUSEFAN",
# "ATTICFAN",
# "DEHUMTYPE",
# "NUMPORTDEHUM",
# "USEDEHUM",
# "ELCOOL",
# "TYPETHERM",
# "HEATCNTL",
# "TEMPHOME",
# "TEMPGONE",
# "TEMPNITE",
# "COOLCNTL",
# "TEMPHOMEAC",
# "TEMPGONEAC",
# "TEMPNITEAC",
# "H2OAPT",
# "H2OMAIN",
# "WHEATSIZ",
# "WHEATBKT",
# "WHEATAGE",
# "FUELH2O",
# "MORETHAN1H2O",
# "FUELH2O2",
# "ELWATER",
# "FOWATER",
# "LPWATER",
# "SOLWATER",
# "WDWATER",
# "UGWATER",
# "LGTINLED",
# "LGTINCFL",
# "LGTINCAN",
# "LGTOUTANY",
# "LGTOUTNITE",
# "LGTOUTLED",
# "LGTOUTCFL",
# "LGTOUTCAN",
# "ELPAY",
# "NGPAY",
# "LPGPAY",
# "FOPAY",
# "SMARTMETER",
# "INTDATAACC",
# "MEDICALDEV",
# "POWEROUT",
# "WHYPOWEROUT",
# "BACKUP",
# "SOLAR",
# "ELOTHER",
# "UGOTH",
# "LPOTHER",
# "FOOTHER",
# "USEEL",
# "USENG",
# "USELP",
# "USEFO",
# "USESOLAR",
# "USEWOOD",
# "ALLELEC",
# "HHSEX",
# "HHAGE",
# "NUMCHILD",
# "NUMADULT1",
# "NUMADULT2",
# "SCALEB",
# "SCALEG",
# "SCALEE",
# "PAYHELP",
# "NOHEATBROKE",
# "NOHEATEL",
# "NOHEATNG",
# "NOHEATBULK",
# "NOHEATDAYS",
# "NOHEATHELP",
# "COLDMA",
# "NOACBROKE",
# "NOACEL",
# "NOACDAYS",
# "NOACHELP",
# "HOTMA",
# "ENERGYASST",
# "ENERGYASST20",
# "ENERGYASST19",
# "ENERGYASST18",
# "ENERGYASST17",
# "ENERGYASST16",
# "ENERGYASSTOTH",
# "SQFTRANGE",
# "SQFTINCB",
# "SQFTINCA",
# "SQFTINCG",
# "TOTSQFT_EN",
# "TOTHSQFT",
# "TOTCSQFT",
# "ZACEQUIPAGE",
# "ZADQINSUL",
# "ZAGECDRYER",
# "ZAGECWASH",
# "ZAGEDW",
# "ZAGEFRZR",
# "ZAGERFRI1",
# "ZAGERFRI2",
# "ZAIRCOND",
# "ZAMTMICRO",
# "ZATHOME",
# "ZATTCCOOL",
# "ZATTCHEAT",
# "ZATTIC",
# "ZATTICFAN",
# "ZATTICFIN",
# "ZBACKUP",
# "ZBASECOOL",
# "ZBASEFIN",
# "ZBASEHEAT",
# "ZBASEOTH",
# "ZBEDROOMS",
# "ZBLENDER",
# "ZCABLESAT",
# "ZCELLAR",
# "ZCELLPHONE",
# "ZCOLDMA",
# "ZCOMBODVR",
# "ZCONCRETE",
# "ZCOOKTOP",
# "ZCOOKTOPFUEL",
# "ZCOOKTOPINDT",
# "ZCOOKTOPUSE",
# "ZCOOLAPT",
# "ZCOOLCNTL",
# "ZCRAWL",
# "ZCROCKPOT",
# "ZCWASHER",
# "ZDEHUMTYPE",
# "ZDESKTOP",
# "ZDISHWASH",
# "ZDOOR1SUM",
# "ZDRAFTY",
# "ZDRYER",
# "ZDRYRFUEL",
# "ZDRYRUSE",
# "ZDVD",
# "ZDWASHUSE",
# "ZDWCYCLE",
# "ZEDUCATION",
# "ZELPAY",
# "ZELPERIPH",
# "ZEMPLOYHH",
# "ZENERGYASST",
# "ZENERGYASST16",
# "ZENERGYASST17",
# "ZENERGYASST18",
# "ZENERGYASST19",
# "ZENERGYASST20",
# "ZENERGYASSTOTH",
# "ZEQUIPAGE",
# "ZEQUIPAUXTYPE",
# "ZEQUIPM",
# "ZFOPAY",
# "ZFREEZER",
# "ZFUELAUX",
# "ZFUELH2O",
# "ZFUELH2O2",
# "ZFUELHEAT",
# "ZFUELPOOL",
# "ZFUELTUB",
# "ZGARGCOOL",
# "ZGARGHEAT",
# "ZH2OAPT",
# "ZH2OMAIN",
# "ZHEATAPT",
# "ZHEATCNTL",
# "ZHEATHOME",
# "ZHHAGE",
# "ZHHSEX",
# "ZHIGHCEIL",
# "ZHOTMA",
# "ZHOUSEFAN",
# "ZHUMIDTYPE",
# "ZICE",
# "ZINTERNET",
# "ZINTSTREAM",
# "ZINTYPEBROAD",
# "ZINTYPECELL",
# "ZINTYPEOTH",
# "ZKOWNRENT",
# "ZLGTIN1TO4",
# "ZLGTIN4TO8",
# "ZLGTINCAN",
# "ZLGTINCFL",
# "ZLGTINLED",
# "ZLGTINMORE8",
# "ZLGTOUTANY",
# "ZLGTOUTCAN",
# "ZLGTOUTCFL",
# "ZLGTOUTLED",
# "ZLGTOUTNITE",
# "ZLOCRFRI2",
# "ZLPGPAY",
# "ZMICRO",
# "ZMONEYPY",
# "ZMONPOOL",
# "ZMONTUB",
# "ZMORETHAN1H2O",
# "ZNCOMBATH",
# "ZNGPAY",
# "ZNHAFBATH",
# "ZNHSLDMEM",
# "ZNOACBROKE",
# "ZNOACDAYS",
# "ZNOACEL",
# "ZNOACHELP",
# "ZNOHEATBROKE",
# "ZNOHEATBULK",
# "ZNOHEATDAYS",
# "ZNOHEATEL",
# "ZNOHEATHELP",
# "ZNOHEATNG",
# "ZNUMADULT1",
# "ZNUMADULT2",
# "ZNUMCFAN",
# "ZNUMCHILD",
# "ZNUMDLHP",
# "ZNUMDLHPAC",
# "ZNUMFIREPLC",
# "ZNUMFLOORFAN",
# "ZNUMFREEZ",
# "ZNUMFRIG",
# "ZNUMLAPTOP",
# "ZNUMMEAL",
# "ZNUMPORTAC",
# "ZNUMPORTDEHUM",
# "ZNUMPORTEL",
# "ZNUMPORTHUM",
# "ZNUMSMPHONE",
# "ZNUMTABLET",
# "ZNUMWWAC",
# "ZONLNEDUC",
# "ZORIGWIN",
# "ZOTHROOMS",
# "ZOUTGRILLFUEL",
# "ZOUTLET",
# "ZOVEN",
# "ZOVENFUEL",
# "ZOVENUSE",
# "ZPAYHELP",
# "ZPLAYSTA",
# "ZPOOLPUMP",
# "ZPOWEROUT",
# "ZPRKGPLC1",
# "ZPRSSCOOK",
# "ZRANGE",
# "ZRANGEFUEL",
# "ZRANGEINDT",
# "ZRCOOKUSE",
# "ZRECBATH",
# "ZRICECOOK",
# "ZROOFTYPE",
# "ZROVENUSE",
# "ZSCALEB",
# "ZSCALEE",
# "ZSCALEG",
# "ZSDESCENT",
# "ZSEPDVR",
# "ZSIZEOFGARAGE",
# "ZSIZFREEZ",
# "ZSIZRFRI1",
# "ZSIZRFRI2",
# "ZSMARTSPK",
# "ZSQFTEST",
# "ZSQFTINCA",
# "ZSQFTINCB",
# "ZSQFTINCG",
# "ZSQFTRANGE",
# "ZSSLIGHT",
# "ZSSOTHER",
# "ZSSSECURE",
# "ZSSTEMP",
# "ZSSTV",
# "ZSTORIES",
# "ZSWIMPOOL",
# "ZTELLDAYS",
# "ZTELLWORK",
# "ZTEMPGONE",
# "ZTEMPGONEAC",
# "ZTEMPHOME",
# "ZTEMPHOMEAC",
# "ZTEMPNITE",
# "ZTEMPNITEAC",
# "ZTLDESKTOP",
# "ZTLLAPTOP",
# "ZTLMONITOR",
# "ZTLOTHER",
# "ZTLTABLET",
# "ZTOAST",
# "ZTOASTOVN",
# "ZTOPFRONT",
# "ZTREESHAD",
# "ZTVAUDIOSYS",
# "ZTVCOLOR",
# "ZTVONWD1",
# "ZTVONWD2",
# "ZTVONWD3",
# "ZTVONWE1",
# "ZTVONWE2",
# "ZTVONWE3",
# "ZTVSIZE1",
# "ZTVSIZE2",
# "ZTVSIZE3",
# "ZTVTYPE1",
# "ZTVTYPE2",
# "ZTVTYPE3",
# "ZTVUSE1",
# "ZTVUSE2",
# "ZTVUSE3",
# "ZTYPEGLASS",
# "ZTYPERFR1",
# "ZTYPERFR2",
# "ZTYPETHERM",
# "ZUGASHERE",
# "ZUPRTFRZR",
# "ZUSECFAN",
# "ZUSECOFFEE",
# "ZUSEDEHUM",
# "ZUSEEQUIPAUX",
# "ZUSEHUMID",
# "ZVCR",
# "ZWALLTYPE",
# "ZWASHLOAD",
# "ZWASHTEMP",
# "ZWHEATAGE",
# "ZWHEATBKT",
# "ZWHEATSIZ",
# "ZWHYPOWEROUT",
# "ZWINDOWS",
# "ZWINECHILL",
# "ZWINFRAME",
# "ZYEARMADERANGE",
# "ZTOTROOMS",
# "ZDNTHEAT",
# "ZTYPEHUQ",
# "ZSTUDIO",
# "ZOUTGRILL",
# "ZHOUSEHOLDER_RACE",
# "ZACEQUIPM_PUB",
# "ZACEQUIPAUXTYPE_PUB",
# "NWEIGHT",
# "NWEIGHT1",
# "NWEIGHT2",
# "NWEIGHT3",
# "NWEIGHT4",
# "NWEIGHT5",
# "NWEIGHT6",
# "NWEIGHT7",
# "NWEIGHT8",
# "NWEIGHT9",
# "NWEIGHT10",
# "NWEIGHT11",
# "NWEIGHT12",
# "NWEIGHT13",
# "NWEIGHT14",
# "NWEIGHT15",
# "NWEIGHT16",
# "NWEIGHT17",
# "NWEIGHT18",
# "NWEIGHT19",
# "NWEIGHT20",
# "NWEIGHT21",
# "NWEIGHT22",
# "NWEIGHT23",
# "NWEIGHT24",
# "NWEIGHT25",
# "NWEIGHT26",
# "NWEIGHT27",
# "NWEIGHT28",
# "NWEIGHT29",
# "NWEIGHT30",
# "NWEIGHT31",
# "NWEIGHT32",
# "NWEIGHT33",
# "NWEIGHT34",
# "NWEIGHT35",
# "NWEIGHT36",
# "NWEIGHT37",
# "NWEIGHT38",
# "NWEIGHT39",
# "NWEIGHT40",
# "NWEIGHT41",
# "NWEIGHT42",
# "NWEIGHT43",
# "NWEIGHT44",
# "NWEIGHT45",
# "NWEIGHT46",
# "NWEIGHT47",
# "NWEIGHT48",
# "NWEIGHT49",
# "NWEIGHT50",
# "NWEIGHT51",
# "NWEIGHT52",
# "NWEIGHT53",
# "NWEIGHT54",
# "NWEIGHT55",
# "NWEIGHT56",
# "NWEIGHT57",
# "NWEIGHT58",
# "NWEIGHT59",
# "NWEIGHT60",
# "PERIODEL",
# "ZELAMOUNT",
# "KWHSPH",
# "KWHCOL",
# "KWHWTH",
# "KWHRFG",
# "KWHRFG1",
# "KWHRFG2",
# "KWHFRZ",
# "KWHCOK",
# "KWHMICRO",
# "KWHCW",
# "KWHCDR",
# "KWHDWH",
# "KWHLGT",
# "KWHTVREL",
# "KWHTV1",
# "KWHTV2",
# "KWHTV3",
# "KWHAHUHEAT",
# "KWHAHUCOL",
# "KWHCFAN",
# "KWHDHUM",
# "KWHHUM",
# "KWHPLPMP",
# "KWHHTBPMP",
# "KWHHTBHEAT",
# "KWHEVCHRG",
# "KWHNEC",
# "KWHOTH",
# "BTUELSPH",
# "BTUELCOL",
# "BTUELWTH",
# "BTUELRFG",
# "BTUELRFG1",
# "BTUELRFG2",
# "BTUELFRZ",
# "BTUELCOK",
# "BTUELMICRO",
# "BTUELCW",
# "BTUELCDR",
# "BTUELDWH",
# "BTUELLGT",
# "BTUELTVREL",
# "BTUELTV1",
# "BTUELTV2",
# "BTUELTV3",
# "BTUELAHUHEAT",
# "BTUELAHUCOL",
# "BTUELCFAN",
# "BTUELDHUM",
# "BTUELHUM",
# "BTUELPLPMP",
# "BTUELHTBPMP",
# "BTUELHTBHEAT",
# "BTUELEVCHRG",
# "BTUELNEC",
# "BTUELOTH",
# "DOLELSPH",
# "DOLELCOL",
# "DOLELWTH",
# "DOLELRFG",
# "DOLELRFG1",
# "DOLELRFG2",
# "DOLELFRZ",
# "DOLELCOK",
# "DOLELMICRO",
# "DOLELCW",
# "DOLELCDR",
# "DOLELDWH",
# "DOLELLGT",
# "DOLELTVREL",
# "DOLELTV1",
# "DOLELTV2",
# "DOLELTV3",
# "DOLELAHUHEAT",
# "DOLELAHUCOL",
# "DOLELCFAN",
# "DOLELDHUM",
# "DOLELHUM",
# "DOLELPLPMP",
# "DOLELHTBPMP",
# "DOLELHTBHEAT",
# "DOLELEVCHRG",
# "DOLELNEC",
# "DOLELOTH",
# "PERIODNG",
# "ZNGAMOUNT",
# "BTUNGSPH",
# "BTUNGWTH",
# "BTUNGCOK",
# "BTUNGCDR",
# "BTUNGPLHEAT",
# "BTUNGHTBHEAT",
# "BTUNGNEC",
# "BTUNGOTH",
# "CUFEETNGSPH",
# "CUFEETNGWTH",
# "CUFEETNGCOK",
# "CUFEETNGCDR",
# "CUFEETNGPLHEAT",
# "CUFEETNGHTBHEAT",
# "CUFEETNGNEC",
# "CUFEETNGOTH",
# "DOLNGSPH",
# "DOLNGWTH",
# "DOLNGCOK",
# "DOLNGCDR",
# "DOLNGPLHEAT",
# "DOLNGHTBHEAT",
# "DOLNGNEC",
# "DOLNGOTH",
# "PERIODLP",
# "ZLPAMOUNT",
# "BTULPSPH",
# "BTULPWTH",
# "BTULPCOK",
# "BTULPCDR",
# "BTULPNEC",
# "BTULPOTH",
# "GALLONLPSPH",
# "GALLONLPWTH",
# "GALLONLPCOK",
# "GALLONLPCDR",
# "GALLONLPNEC",
# "GALLONLPOTH",
# "DOLLPSPH",
# "DOLLPWTH",
# "DOLLPCOK",
# "DOLLPCDR",
# "DOLLPNEC",
# "DOLLPOTH",
# "PERIODFO",
# "ZFOAMOUNT",
# "BTUFOSPH",
# "BTUFOWTH",
# "BTUFONEC",
# "BTUFOOTH",
# "GALLONFOSPH",
# "GALLONFOWTH",
# "GALLONFONEC",
# "GALLONFOOTH",
# "DOLFOSPH",
# "DOLFOWTH",
# "DOLFONEC",
# "DOLFOOTH",
# "ZWDAMOUNT",
# "TOTALBTUSPH",
# "TOTALDOLSPH",
# "TOTALBTUWTH",
# "TOTALDOLWTH",
# "TOTALBTUOTH",
# "TOTALDOLOTH",
# "TOTALBTU",
# "TOTALDOL",
# "DBT1",
# "DBT99",
# "GWT",
# "WOODTYPE",
# "OUTLET",
# "ELECVEH",
# "EVCHRGHOME",
# "EVCHRGAPT",
# "EVCHRGWKS",
# "EVCHRGBUS",
# "EVCHRGMUNI",
# "EVCHRGDLR",
# "EVCHRGHWY",
# "EVCHRGOTH",
# "EVHOMEAMT",
# "EVCHRGTYPE"

df = df[
    [
        # "REGIONC",
        "DIVISION",
        "state_name",
        "BA_climate",
        "HDD65",
        "CDD65",
        "TYPEHUQ",
        "KOWNRENT",
        "YEARMADERANGE",
        "BEDROOMS",
        "NCOMBATH",
        "NHAFBATH",
        "OTHROOMS",
        "TOTROOMS",
        "NUMFRIG",
        "NUMFREEZ",
        "OVEN",
        "MICRO",
        "TVCOLOR",
        "DESKTOP",
        "NUMLAPTOP",
        "NUMTABLET",
        "ELPERIPH",
        "NUMSMPHONE",
        "CELLPHONE",
        "NUMCFAN",
        "LGTIN1TO4",
        "LGTIN4TO8",
        "LGTINMORE8",
        "EMPLOYHH",
        "EDUCATION",
        "SDESCENT",
        "HOUSEHOLDER_RACE",
        "NHSLDMEM",
        "ATHOME",
        "MONEYPY",
        "SQFTEST",
        "KWH",
        "BTUEL",
        "DOLLAREL",
        "ELXBTU",
        "CUFEETNG",
        "BTUNG",
        "DOLLARNG",
        "NGXBTU",
        "GALLONLP",
        "BTULP",
        "DOLLARLP",
        "LPXBTU",
        "GALLONFO",
        "BTUFO",
        "DOLLARFO",
        "FOXBTU",
        "BTUWD",
    ]
]

# Clubbing Some Columns Together

df["DESKTOP"] = df[
    [
        "DESKTOP",
        "NUMLAPTOP",
        "TVCOLOR",
        "NUMSMPHONE",
        "CELLPHONE",
        "ELPERIPH",
        "NUMTABLET",
    ]
].sum(axis=1)
df = df.drop("NUMLAPTOP", axis=1)
df = df.drop("NUMSMPHONE", axis=1)
df = df.drop("CELLPHONE", axis=1)
df = df.drop("TVCOLOR", axis=1)
df = df.drop("ELPERIPH", axis=1)
df = df.drop("NUMTABLET", axis=1)

# Defining Total Energy to be Electricity + GAS

df["TOTAL_ENERGY_1000BTU"] = df[
    [
        "BTUEL",
        "BTUNG",
    ]
].sum(axis=1)

# Renaming Columns to easier understand

rename_cols = {
    "HDD65": "HDD",
    "CDD65": "CDD",
    "TYPEHUQ": "HOUSING_TYPE",
    "KOWNRENT": "RENT_OR_OWN",
    "BEDROOMS": "NUM_BEDROOMS",
    "NCOMBATH": "NUM_FULL_BATHROOMS",
    "NHAFBATH": "NUM_HALF_BATHROOMS",
    "OTHROOMS": "NUM_OTHER_ROOMS",
    "TOTROOMS": "NUM_TOTAL_ROOMS",
    "OVEN": "NUMOVEN",
    "MICRO": "NUMMICRO",
    "DESKTOP": "NUM_ELECTRONIC_DEVICES",
    "LGTIN1TO4": "NUMLIGHTS_1_4_HRS_DAY",
    "LGTIN4TO8": "NUMLIGHTS_4_8_HRS_DAY",
    "LGTINMORE8": "NUMLIGHTS_MORE_8_HRS_DAY",
    "EMPLOYHH": "EMPLOYMENT_STATUS",
    "SDESCENT": "HISPANIC/LATINO_OR_NOT",
    "NHSLDMEM": "HOUSE_MEMBER_COUNT",
    "ATHOME": "NUM_WEEKDAYS_AT_HOME",
    "MONEYPY": "ANNUAL_GROSS_HOUSE_INCOME",
    "SQFTEST": "REPORTED_SQ_FT",
    "KWH": "TOTAL_ELECTRICITY_USE_KILOWATTHRS",
    "BTUEL": "TOTAL_ELECTRICITY_USE_1000BTU",
    "DOLLAREL": "TOTAL_ELECTRICITY_COST_$",
    "ELXBTU": "CONVERSION_ELECTRICITY",
    "CUFEETNG": "TOTAL_GAS_USE_100ft3",
    "BTUNG": "TOTAL_GAS_USE_1000BTU",
    "DOLLARNG": "TOTAL_NATURAL_GAS_COST_$",
    "NGXBTU": "CONVERSION_GAS",
    "GALLONLP": "TOTAL_PROPANE_USE_GALLONS",
    "BTULP": "TOTAL_PROPANE_USE_1000BTU",
    "DOLLARLP": "TOTAL_PROPANE_COST_$",
    "LPXBTU": "CONVERSION_PROPANE",
    "GALLONFO": "TOTAL_OILKEROSENE_USE_GALLONS",
    "BTUFO": "TOTAL_OILKEROSENE_USE_1000BTU",
    "DOLLARFO": "TOTAL_OILKEROSENE_COST_$",
    "FOXBTU": "CONVERSION_OILKEROSENE",
    "BTUWD": "TOTAL_WOOD_USE_1000BTU",
}

df = df.rename(columns=rename_cols)

# Fixing the 'RENT_OR_OWN' column - make all Rents 0 for boolean modeling

df["RENT_OR_OWN"] = df["RENT_OR_OWN"].replace(3, 0)
df["RENT_OR_OWN"] = df["RENT_OR_OWN"].replace(2, 0)

# Undoing the Encoding on the Categorical Data which is not correct

df["HOUSING_TYPE"] = df["HOUSING_TYPE"].replace(
    {
        1: "Mobile Home",
        2: "Single-Family Detached",
        3: "Single-Family Attached",
        4: "Apartment in building with 2-4 units",
        5: "Apartment in building with >= 5 units",
    }
)

df["EMPLOYMENT_STATUS"] = df["EMPLOYMENT_STATUS"].replace(
    {1: "Full-time", 2: "Part-time", 3: "Retired", 4: "Not employed"}
)

df["HOUSEHOLDER_RACE"] = df["HOUSEHOLDER_RACE"].replace(
    {
        1: "White",
        2: "African American",
        3: "American Indian/Natives",
        4: "Asian",
        5: "Native Hawaiian/Pacific Islander",
        6: ">= 2 Races",
    }
)

# Removing other kinds of energy for fully cleaned data ready for MODELING

df_eda = df[df["REPORTED_SQ_FT"] >= 0]

print("Total Number of Households: ")
print(len(df))
print("Number of Households with no Propane Use: ")
print(len(df.loc[df["TOTAL_PROPANE_USE_1000BTU"] == 0.0]))
print("Number of Households with no Oil/Kerosene Use: ")
print(len(df.loc[df["TOTAL_OILKEROSENE_USE_1000BTU"] == 0.0]))
print("Number of Households with no Wood Use: ")
print(len(df.loc[df["TOTAL_WOOD_USE_1000BTU"] == 0.0]))

df = df[df["TOTAL_PROPANE_USE_1000BTU"] == 0.0]
df = df[df["TOTAL_OILKEROSENE_USE_1000BTU"] == 0.0]
df = df[df["TOTAL_WOOD_USE_1000BTU"] == 0.0]

print("New Total Number of Households: ")
print(len(df))

subfolder_path = "/Users/aditya/Documents/research/energy/models"
filename = "recs_filtered_2020.csv"
file_path = os.path.join(subfolder_path, filename)
df.to_csv(file_path, index=False)

# Legend Transfers for EDA purposes only

df_eda["RENT_OR_OWN"] = df_eda["RENT_OR_OWN"].replace({0: "Rent", 1: "Own"})

df_eda["YEARMADERANGE"] = df_eda["YEARMADERANGE"].replace(
    {
        1: "Before 1950",
        2: "1950 - 1959",
        3: "1960 - 1969",
        4: "1970 - 1979",
        5: "1980 - 1989",
        6: "1990 - 1999",
        7: "2000 - 2009",
        8: "2010 - 2015",
        9: "2016 - 2020",
    }
)

df_eda["EDUCATION"] = df_eda["EDUCATION"].replace(
    {
        1: "Less than High School",
        2: "High School",
        3: "College",
        4: "Bachelors",
        5: "Masters or PhD",
    }
)

df_eda["ANNUAL_GROSS_HOUSE_INCOME"] = df_eda["ANNUAL_GROSS_HOUSE_INCOME"].replace(
    {
        1: "Less than 5000",
        2: "5000 - 7499",
        3: "7500 - 9999",
        4: "10000 - 12499",
        5: "12500 - 14999",
        6: "15000 - 19999",
        7: "20000 - 24999",
        8: "25000 - 29999",
        9: "30000 - 34999",
        10: "35000 - 39999",
        11: "40000 - 49999",
        12: "50000 - 59999",
        13: "60000 - 74999",
        14: "75000 - 99999",
        15: "100000 - 149999",
        16: "150000 or more",
    }
)

subfolder_path = "/Users/aditya/Documents/research/energy/data_analysis"
filename = "recs_filtered_2020_eda_with_all_energies.csv"
file_path = os.path.join(subfolder_path, filename)
df_eda.to_csv(file_path, index=False)

df_eda = df_eda[df_eda["TOTAL_PROPANE_USE_1000BTU"] == 0.0]
df_eda = df_eda[df_eda["TOTAL_OILKEROSENE_USE_1000BTU"] == 0.0]
df_eda = df_eda[df_eda["TOTAL_WOOD_USE_1000BTU"] == 0.0]

subfolder_path = "/Users/aditya/Documents/research/energy/data_analysis"
filename = "recs_filtered_2020_eda.csv"
file_path = os.path.join(subfolder_path, filename)
df_eda.to_csv(file_path, index=False)
